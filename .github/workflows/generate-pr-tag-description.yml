name: Generate tag and description

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  generate-pr-text:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history is fetched

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.DOCUSAURUS_PAT }}" | gh auth login --with-token

      - name: Determine PR Tags
        id: determine-tags
        run: |
          # Get list of changed files
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          echo "Files changed:"
          echo "$files"

          # Initialize tags array
          tags=()

          # Determine tags based on file paths
          if echo "$files" | grep -q "^formal/"; then
            tags+=("provider")
          fi

          # Export tags as a space-separated string
          tags_str=$(IFS=, ; echo "${tags[*]}")
          echo "Detected tags: $tags_str"

          # Set as environment variable
          echo "PR_TAGS=$tags_str" >> $GITHUB_ENV

      - name: Ensure Labels Exist
        env:
          GITHUB_TOKEN: ${{ secrets.DOCUSAURUS_PAT }}
        run: |
          # Define required labels with their colors and descriptions
          declare -A labels
          labels=( 
            ["provider"]="f29513|Provider related changes"
          )

          # Iterate through labels and ensure they exist
          for label in "${!labels[@]}"; do
            IFS='|' read -r color description <<< "${labels[$label]}"
            label_exists=$(gh api repos/${{ github.repository }}/labels/$label --silent || echo "not found")
            if [ "$label_exists" == "not found" ]; then
              echo "Creating label '$label'..."
              gh api repos/${{ github.repository }}/labels -X POST -f name="$label" -f color="$color" -f description="$description"
              echo "Label '$label' created."
            else
              echo "Label '$label' already exists."
            fi
          done

      - name: Add Labels to PR
        if: env.PR_TAGS != ''
        run: |
          pr_number=${{ github.event.pull_request.number }}
          IFS=, read -r -a tags_array <<< "${{ env.PR_TAGS }}"
          
          # Convert tags array to JSON array
          tags_json=$(printf '%s\n' "${tags_array[@]}" | jq -R . | jq -s .)
          
          echo "Adding labels: $tags_json to PR #$pr_number"
          
          # Add labels using GitHub API
          response=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.DOCUSAURUS_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$pr_number/labels \
            -d "{\"labels\": $tags_json}")
          
          echo "API Response: $response"
          
          # Check for errors
          if [[ "$response" == *"errors"* ]]; then
            echo "Error adding labels: $response"
            exit 1
          else
            echo "Labels added successfully."
          fi

      - name: Set Change Flags
        run: |
          # Initialize flags
          echo "provider_changed=false" >> $GITHUB_ENV

          # Set flags based on PR_TAGS
          IFS=, read -r -a tags_array <<< "${{ env.PR_TAGS }}"
          for tag in "${tags_array[@]}"; do
            case "$tag" in
              provider)
                echo "provider_changed=true" >> $GITHUB_ENV
                ;;
            esac
          done

      - name: Construct Completion Prompt
        env:
          GITHUB_TOKEN: ${{ secrets.DOCUSAURUS_PAT }}
        id: construct-prompt
        run: |
          prompt="You are generating a Pull Request (PR) description. Use only commits, code changes, and PR metadata as the basis. For each label that has changes, include sections for **New**, **Fixed**, and **Changed** only if there are actual items to list. Use simple, direct language.\n\n"

          if [ "$provider_changed" = "true" ]; then
            prompt+="## Provider\n"
            prompt+="### New\nSummarize new features or additions (only if any).\n\n"
            prompt+="### Fixed\nSummarize resolved bugs or issues (only if any).\n\n"
            prompt+="### Changed\nSummarize modifications or improvements (only if any).\n\n"
          fi

          prompt+="## Additional Information\nAdd any extra important details or considerations.\n\n"

          echo "completion_prompt=$prompt" >> $GITHUB_ENV

      - name: Generate PR Description with OpenAI
        uses: platisd/openai-pr-description@master
        with:
          github_token: ${{ secrets.DOCUSAURUS_PAT }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          completion_prompt: ${{ env.completion_prompt }}
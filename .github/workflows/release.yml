# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
permissions:
  contents: write
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    # Skip goreleaser for test tags
    if: ${{ !contains(github.ref, '-test') }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          go-version: '1.24'
          cache: false
      -
        name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-changelog:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    outputs:
      changelog_content: ${{ steps.generate-changelog.outputs.changelog_content }}
      component: ${{ steps.generate-changelog.outputs.component }}
      version: ${{ steps.generate-changelog.outputs.version }}
      branch_component: ${{ steps.generate-changelog.outputs.branch_component }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate GitHub App token
        uses: tibdex/github-app-token@v2
        id: generate-token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: '["terraform-provider-formal", "mintlify-docs"]'

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install semver axios

      - name: Generate Changelog
        id: generate-changelog
        uses: actions/github-script@v8
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const generateChangelog = require('./.github/workflows/scripts/generate-changelog.js');
            await generateChangelog({ github, context, core, process });

  create-changelog-pr:
    needs: generate-changelog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate GitHub App token
        uses: tibdex/github-app-token@v2
        id: generate-token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: '["terraform-provider-formal", "mintlify-docs"]'

      - name: Create Changelog PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: "docs: add changelog for ${{ needs.generate-changelog.outputs.component }} ${{ needs.generate-changelog.outputs.version }}"
          title: "docs: add changelog for ${{ needs.generate-changelog.outputs.component }} ${{ needs.generate-changelog.outputs.version }}"
          body: ${{ needs.generate-changelog.outputs.changelog_content }}
          branch: "changelog/${{ needs.generate-changelog.outputs.branch_component }}-${{ needs.generate-changelog.outputs.version }}"
          base: main

  sync-to-docs:
    needs: [generate-changelog, create-changelog-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        uses: tibdex/github-app-token@v2
        id: generate-token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: '["terraform-provider-formal", "mintlify-docs"]'

      - name: Checkout terraform-provider repo
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: terraform-provider-formal

      - name: Checkout docs repo
        uses: actions/checkout@v5
        with:
          repository: formalco/mintlify-docs
          token: ${{ steps.generate-token.outputs.token }}
          path: mintlify-docs
          ref: main

      - name: Add Changelog
        run: |
          # Define the mapping of components to their changelog files
          declare -A changelog_files=(
            ["provider"]="docs/changelog/terraform-provider.mdx"
          )

          # Get the target file for this component
          target_file="mintlify-docs/${changelog_files[${{ needs.generate-changelog.outputs.branch_component }}]}"

          # Create directory if it doesn't exist
          mkdir -p "$(dirname "$target_file")"

          # Create file if it doesn't exist with Mintlify frontmatter
          if [ ! -f "$target_file" ]; then
            cat > "$target_file" <<'EOF'
---
title: "Terraform Provider"
description: "Release notes for Formal Terraform Provider"
---

EOF
          fi

          # Insert the new changelog content after the frontmatter
          node terraform-provider-formal/.github/workflows/scripts/insert-changelog.js "$target_file" "${{ needs.generate-changelog.outputs.changelog_content }}"

      - name: Create Docs PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          path: mintlify-docs
          commit-message: "docs: update changelog for ${{ needs.generate-changelog.outputs.component }} ${{ needs.generate-changelog.outputs.version }}"
          title: "docs: update changelog for ${{ needs.generate-changelog.outputs.component }} ${{ needs.generate-changelog.outputs.version }}"
          body: "This PR updates the changelog for ${{ needs.generate-changelog.outputs.component }} version ${{ needs.generate-changelog.outputs.version }}"
          branch: "changelog/${{ needs.generate-changelog.outputs.branch_component }}-${{ needs.generate-changelog.outputs.version }}"
          base: main
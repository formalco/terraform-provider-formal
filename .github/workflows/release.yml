# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Mode (auto = generate all missing changelogs, latest = generate for latest tag only)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - latest
permissions:
  contents: write
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    # Skip goreleaser for test tags
    if: ${{ !contains(github.ref, '-test') }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          go-version: '1.24'
          cache: false
      -
        name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-to-docs:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - name: Checkout terraform-provider repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate GitHub App token
        uses: tibdex/github-app-token@v2
        id: generate-token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: '["terraform-provider-formal", "mintlify-docs"]'

      - name: Checkout docs repo
        uses: actions/checkout@v5
        with:
          repository: formalco/mintlify-docs
          ref: main
          token: ${{ steps.generate-token.outputs.token }}
          path: docs-repo
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'

      - name: Generate changelog
        id: generate
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Determine mode: for tag pushes use 'latest', for workflow_dispatch use input
          MODE="${{ github.event.inputs.mode || 'latest' }}"

          echo "Generating changelog in mode: $MODE"
          node .github/workflows/scripts/generate-changelog-v2.js \
            --mode "$MODE" \
            --docs-repo-path docs-repo

      - name: Check for changes in docs repo
        id: check-changes
        working-directory: docs-repo
        run: |
          if git diff --quiet && git diff --cached --quiet && [ -z "$(git ls-files --others --exclude-standard)" ]; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected:"
            git status --short
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create or update PR in docs repo
        if: steps.check-changes.outputs.has_changes == 'true'
        working-directory: docs-repo
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          # Get version range from generate step outputs (or fallback to latest tag)
          VERSION_RANGE="${{ steps.generate.outputs.version }}"
          VERSIONS_COUNT="${{ steps.generate.outputs.versions_count }}"
          PR_LIST="${{ steps.generate.outputs.pr_list }}"

          # Use fallback values if outputs are empty
          if [ -z "$VERSION_RANGE" ]; then
            VERSION_RANGE=$(git tag -l "v*" --sort=-version:refname | head -1 | sed 's/^v//')
          fi
          if [ -z "$VERSIONS_COUNT" ]; then
            VERSIONS_COUNT="1"
          fi

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check for existing open PR with changelog branch pattern for terraform-provider
          ALL_OPEN_PRS=$(gh pr list --state open --json number,headRefName 2>/dev/null || echo "[]")
          EXISTING_PR=$(echo "$ALL_OPEN_PRS" | jq '.[] | select(.headRefName | startswith("changelog/terraform-provider-")) | {number, headRefName}' | jq -s '.[0]')

          if [ -n "$EXISTING_PR" ] && [ "$EXISTING_PR" != "null" ]; then
            # Extract existing branch name and PR number
            EXISTING_BRANCH=$(echo "$EXISTING_PR" | jq -r '.headRefName')
            PR_NUMBER=$(echo "$EXISTING_PR" | jq -r '.number')

            echo "Found existing PR #${PR_NUMBER} with branch ${EXISTING_BRANCH}"
            echo "Updating existing PR instead of creating a new one..."

            BRANCH="$EXISTING_BRANCH"

            # Checkout existing branch and force push updates
            git fetch origin "$BRANCH"
            git checkout "$BRANCH"
            git add .
            git commit --amend --no-edit -m "docs: update changelog for Terraform Provider (${VERSIONS_COUNT} versions)"
            git push origin "$BRANCH" --force

            # Update PR title and body
            if [ "$VERSIONS_COUNT" = "1" ]; then
              TITLE="docs: update changelog for Terraform Provider ${VERSION_RANGE}"
              BODY="This PR updates the changelog for **Terraform Provider** version **${VERSION_RANGE}**."
            else
              TITLE="docs: update changelog for Terraform Provider ${VERSION_RANGE}"
              BODY="This PR updates the changelog for **Terraform Provider** with **${VERSIONS_COUNT} versions** (${VERSION_RANGE})."
            fi

            gh pr edit "$PR_NUMBER" \
              --title "$TITLE" \
              --body "$BODY

Last updated from workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

## Pull Requests Included
${PR_LIST}

## Next Steps
1. Review the generated changelogs
2. Edit if needed to ensure accuracy
3. Approve and merge to publish

🤖 Generated with automation"

            echo "Updated existing PR #${PR_NUMBER}"
          else
            echo "No existing PR found, creating a new one..."

            # Create new branch and commit with timestamp to ensure uniqueness
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            BRANCH="changelog/terraform-provider-${TIMESTAMP}"
            git checkout -b "$BRANCH"
            git add .
            git commit -m "docs: update changelog for Terraform Provider (${VERSIONS_COUNT} versions)"
            git push origin "$BRANCH"

            # Create PR with appropriate title and body
            if [ "$VERSIONS_COUNT" = "1" ]; then
              TITLE="docs: update changelog for Terraform Provider ${VERSION_RANGE}"
              BODY="This PR updates the changelog for **Terraform Provider** version **${VERSION_RANGE}**."
            else
              TITLE="docs: update changelog for Terraform Provider ${VERSION_RANGE}"
              BODY="This PR updates the changelog for **Terraform Provider** with **${VERSIONS_COUNT} versions** (${VERSION_RANGE})."
            fi

            PR_URL=$(gh pr create \
              --title "$TITLE" \
              --body "$BODY

Generated from workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

## Pull Requests Included
${PR_LIST}

## Next Steps
1. Review the generated changelogs
2. Edit if needed to ensure accuracy
3. Approve and merge to publish

🤖 Generated with automation" \
              --base main \
              --head "$BRANCH")

            # Extract PR number from URL
            PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')

            echo "Created new PR #${PR_NUMBER} with branch ${BRANCH}"
          fi

      - name: No changes needed
        if: steps.check-changes.outputs.has_changes == 'false'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "ℹ️  No changelog updates needed for Terraform Provider"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
permissions:
  contents: write
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    # Skip goreleaser for test tags
    if: ${{ !contains(github.ref, '-test') }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          go-version: '1.24'
          cache: false
      -
        name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-changelog:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.DOCUSAURUS_PAT }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    outputs:
      changelog_content: ${{ steps.generate-changelog.outputs.changelog_content }}
      component: ${{ steps.generate-changelog.outputs.component }}
      version: ${{ steps.generate-changelog.outputs.version }}
      branch_component: ${{ steps.generate-changelog.outputs.branch_component }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install semver axios

      - name: Generate Changelog
        id: generate-changelog
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.DOCUSAURUS_PAT }}
          script: |
            const fs = require('fs');
            const semver = require('semver');
            const axios = require('axios');

            const components = {
              'v': { label: 'provider', color: 'f29513' },
            };

            const tag = context.ref.split('/').pop();
            console.log(`Processing tag: ${tag}`);
            const tagComponent = tag.charAt(0);
            const version = tag.substring(1);

            const config = components[tagComponent];
            if (!config) {
              console.log(`Unknown component: ${tagComponent}`);
              core.setFailed('Unknown component');
              return;
            }

            // Get previous tag
            const tags = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `tags/${tagComponent}-`
            });
            
            const sortedTags = tags.data
              .map(tag => tag.ref.split('/').pop())
              .filter(tag => tag.startsWith(`${tagComponent}-`))
              .sort((a, b) => {
                const vA = a.split('-')[1];
                const vB = b.split('-')[1];
                return -semver.compare(vA, vB);
              });

            const currentIndex = sortedTags.indexOf(tag);
            const previousTag = currentIndex < sortedTags.length - 1 ? sortedTags[currentIndex + 1] : null;
            console.log(`Previous tag: ${previousTag}`);
            let since = '';
            if (previousTag) {
              try {
                const prevTagData = await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${previousTag}`
                });
                console.log(`Previous tag data:`, prevTagData.data);

                let commitSha = prevTagData.data.object.sha;
                
                // If the tag object is an annotated tag, fetch the tag details to get the commit SHA
                if (prevTagData.data.object.type === 'tag') {
                  const tagData = await github.rest.git.getTag({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_sha: commitSha
                  });
                  commitSha = tagData.data.object.sha; // The commit SHA from the annotated tag
                }

                const prevTagCommit = await github.rest.git.getCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  commit_sha: commitSha
                });
                since = prevTagCommit.data.author.date;
              } catch (error) {
                console.error(`Error fetching previous tag commit: ${error.message}`);
                core.setFailed('Failed to fetch previous tag commit');
                return;
              }
            }
            console.log(`Since: ${since}`);
            // Fetch PRs for this component
            const searchQuery = `repo:${context.repo.owner}/${context.repo.repo} is:pr is:merged base:main label:${config.label} ${since ? `merged:>${since}` : ''}`;
            console.log(`Search query: ${searchQuery}`);
            
            const result = await github.rest.search.issuesAndPullRequests({ 
              q: searchQuery,
              per_page: 100
            });

            if (result.data.items.length === 0) {
              console.log(`No PRs found for ${tagComponent}`);
              core.setOutput('changelog_content', `# ${tagComponent} ${version}\n\nNo changes in this release.`);
              core.setOutput('component', tagComponent);
              core.setOutput('version', version);
              core.setOutput('branch_component', tagComponent);
              return;
            }

            // Prepare PR data for OpenAI
            const prData = result.data.items.map(pr => ({
              title: pr.title,
              number: pr.number,
              url: pr.html_url,
              labels: pr.labels.map(l => l.name.toLowerCase()),
              body: pr.body
            }));

            // Generate changelog using OpenAI
            const openaiPrompt = {
              model: "gpt-5",
              messages: [{
                role: "system",
               content: "You are a technical writer creating an external-facing changelog for our customers. Your goal is to communicate **high-level functionality changes**, not internal implementation details like code refactors, function changes, or technical restructuring.\n\n" +
                "### Changelog Format:\n" +
                "- Each release must include only the relevant sections: \n" +
                "  - **### New** (for new features)\n" +
                "  - **### Fixed** (for bug fixes)\n" +
                "  - **### Changed** (for modifications to existing functionality)\n" +
                "- Omit any section that has no changes.\n" +
                "- Each bullet point should be **short, clear, and impact-focused**.\n" +
                "- Keep bullet points between 15-120 characters.\n" +
                "- Use a single line per change; only use two lines for complex changes that cannot be simplified further.\n\n" +
                
                "### What to Include:\n" +
                "1. Extract only customer-facing changes of PRs.\n" +
                "2. **Choose only one category per change** (do not list the same item in multiple sections).\n" +
                "3. **Explain why the change matters** to users, avoiding technical jargon.\n" +
                "4. **Do not include PR numbers, internal function names, or implementation details.**\n" +
                "5. **Start each bullet point with a verb** in present tense (e.g., 'Add', 'Fix', 'Update').\n" +
                "6. **Group related changes** under a single bullet point to avoid fragmentation.\n\n" +
                
                "### Grouping Related Changes:\n" +
                "- Combine related changes into a single, comprehensive bullet point\n" +
                "- Include all relevant aspects of the feature or change\n" +
                "- Use commas or 'with' to connect related components\n\n" +
                
                "Example of good grouping:\n" +
                "✓ Add PDF export with custom headers, watermarks, and page numbering\n" +
                "✗ Add PDF export\n" +
                "✗ Add custom headers to PDF export\n" +
                "✗ Add watermarks to PDF export\n" +
                "✗ Add page numbering to PDF export\n\n" +
                
                "### Example Output:\n" +
                "```\n" +
                "## 1.12.37 (2025-02-06)\n" +
                "\n" +
                "### New\n" +
                "- Add support for masking policies on columns with shared paths in Snowflake, improving data security and compliance.\n" +
                "\n" +
                "### Changed\n" +
                "- Improve masking policy enforcement for better consistency across similar columns, reducing manual configuration.\n" +
                "```\n" +
                "\n" +
                "Follow this structure strictly. The focus should always be on how the changes affect customers, **not on how the changes were implemented.**"
              }, {
                role: "user",
                content: `Generate a changelog for our Terraform Provider version ${version} based on these Pull Requests:\n${JSON.stringify(prData, null, 2)}`
              }]
            };

            try {
              const openaiResponse = await axios.post('https://api.openai.com/v1/chat/completions', openaiPrompt, {
                headers: {
                  'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                  'Content-Type': 'application/json'
                }
              });

              let changelogContent = openaiResponse.data.choices[0].message.content;

              // Only remove title if it starts with # but not with ###
              if (changelogContent.startsWith('#') && !changelogContent.startsWith('###')) {
                const firstSectionIndex = changelogContent.indexOf('### ');
                if (firstSectionIndex !== -1) {
                  changelogContent = changelogContent.substring(firstSectionIndex);
                }
              }

              // Determine tags based on changelog content
              const tags = [];
              if (changelogContent.includes('### New')) tags.push('New Features');
              if (changelogContent.includes('### Fixed')) tags.push('Bug Fixes');
              if (changelogContent.includes('### Changed')) tags.push('Improvements');

              const tagsString = tags.length > 0 ? ` tags={${JSON.stringify(tags)}}` : '';

              // Format date as "Month Day, Year" (e.g., "October 15, 2025")
              const formatDate = (dateStr) => {
                const d = new Date(dateStr);
                const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                                   'July', 'August', 'September', 'October', 'November', 'December'];
                return `${monthNames[d.getMonth()]} ${d.getDate()}, ${d.getFullYear()}`;
              };

              const today = new Date();
              const formattedDate = formatDate(today);

              // Return with Update wrapper for Mintlify
              const formattedChangelog = `<Update label="${formattedDate}"${tagsString}>

## ${version}

${changelogContent.trim()}

</Update>`;

              core.setOutput('changelog_content', formattedChangelog);
              core.setOutput('component', "Formal Terraform Provider");
              core.setOutput('branch_component', "provider");
              core.setOutput('version', version);

            } catch (error) {
              console.error('OpenAI API Error:', error.response?.data || error);
              core.setFailed('Failed to generate changelog with OpenAI');
            }

  create-changelog-pr:
    needs: generate-changelog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Changelog PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.DOCUSAURUS_PAT }}
          commit-message: "docs: add changelog for ${{ needs.generate-changelog.outputs.component }} ${{ needs.generate-changelog.outputs.version }}"
          title: "docs: add changelog for ${{ needs.generate-changelog.outputs.component }} ${{ needs.generate-changelog.outputs.version }}"
          body: ${{ needs.generate-changelog.outputs.changelog_content }}
          branch: "changelog/${{ needs.generate-changelog.outputs.branch_component }}-${{ needs.generate-changelog.outputs.version }}"
          base: main

  sync-to-docs:
    needs: [generate-changelog, create-changelog-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout docs repo
        uses: actions/checkout@v5
        with:
          repository: formalco/mintlify-docs
          token: ${{ secrets.DOCUSAURUS_PAT }}
          path: mintlify-docs
          ref: main

      - name: Add Changelog
        run: |
          # Define the mapping of components to their changelog files
          declare -A changelog_files=(
            ["provider"]="docs/changelog/terraform-provider.mdx"
          )

          # Get the target file for this component
          target_file="mintlify-docs/${changelog_files[${{ needs.generate-changelog.outputs.branch_component }}]}"

          # Create directory if it doesn't exist
          mkdir -p "$(dirname "$target_file")"

          # Create file if it doesn't exist with Mintlify frontmatter
          if [ ! -f "$target_file" ]; then
            cat > "$target_file" <<'EOF'
---
title: "Terraform Provider"
description: "Release notes for Formal Terraform Provider"
---

EOF
          fi

          # Insert the new changelog content after the frontmatter (after second ---)
          # Create a temporary file for the new changelog content
          new_content_file=$(mktemp)
          echo "${{ needs.generate-changelog.outputs.changelog_content }}" > "$new_content_file"

          # Create another temporary file for the updated changelog
          temp_file=$(mktemp)

          # Use awk to insert content after second ---
          awk 'BEGIN {seen_first=0; inserted=0}
          /^---$/ {
            print
            if (seen_first == 1 && inserted == 0) {
              print ""
              system("cat '"$new_content_file"'")
              print ""
              inserted=1
            }
            if (seen_first == 0) {
              seen_first=1
            }
            next
          }
          {print}' "$target_file" > "$temp_file"

          # Move the updated content back into the changelog file
          mv "$temp_file" "$target_file"

          # Clean up the temporary file
          rm -f "$new_content_file"

      - name: Create Docs PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.DOCUSAURUS_PAT }}
          path: mintlify-docs
          commit-message: "docs: update changelog for ${{ needs.generate-changelog.outputs.component }} ${{ needs.generate-changelog.outputs.version }}"
          title: "docs: update changelog for ${{ needs.generate-changelog.outputs.component }} ${{ needs.generate-changelog.outputs.version }}"
          body: "This PR updates the changelog for ${{ needs.generate-changelog.outputs.component }} version ${{ needs.generate-changelog.outputs.version }}"
          branch: "changelog/${{ needs.generate-changelog.outputs.branch_component }}-${{ needs.generate-changelog.outputs.version }}"
          base: main